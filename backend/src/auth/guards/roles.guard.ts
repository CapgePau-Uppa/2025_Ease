/**
 * @file roles.guard.ts
 * @brief Guard pour la v√©rification des r√¥les.
 *
 * Ce guard v√©rifie si l'utilisateur poss√®de les r√¥les requis
 * pour acc√©der √† une route prot√©g√©e.
 */

import {
  Injectable,
  CanActivate,
  ExecutionContext,
  UnauthorizedException,
} from "@nestjs/common";
import { Reflector } from "@nestjs/core";
import { UserRole } from "../enums/role.enum";
import { ROLES_KEY } from "../decorators/roles.decorator";

@Injectable()
export class RolesGuard implements CanActivate {
  constructor(private reflector: Reflector) {}

  canActivate(context: ExecutionContext): boolean {
    const requiredRoles = this.reflector.getAllAndOverride<UserRole[]>(
      ROLES_KEY,
      [context.getHandler(), context.getClass()],
    );

    console.log("üîí R√¥les requis:", requiredRoles);

    if (!requiredRoles || requiredRoles.length === 0) {
      console.log("‚úÖ Aucun r√¥le requis");
      return true;
    }

    const request = context.switchToHttp().getRequest();
    const user = request.user;

    console.log("üë§ Utilisateur de la requ√™te:", {
      id: user?.id,
      email: user?.email,
      role: user?.role,
    });

    if (!user) {
      console.error("‚ùå Aucun utilisateur trouv√© dans la requ√™te");
      throw new UnauthorizedException("Utilisateur non authentifi√©");
    }

    if (!user.role) {
      console.error("‚ùå Utilisateur sans r√¥le d√©fini");
      throw new UnauthorizedException("R√¥le utilisateur non d√©fini");
    }

    const hasRequiredRole = requiredRoles.includes(user.role);
    console.log(`${hasRequiredRole ? "‚úÖ" : "‚ùå"} V√©rification du r√¥le:`, {
      userRole: user.role,
      requiredRoles,
      hasAccess: hasRequiredRole,
    });

    if (!hasRequiredRole) {
      throw new UnauthorizedException(
        `Acc√®s refus√©. R√¥le requis: ${requiredRoles.join(", ")}`,
      );
    }

    return true;
  }
}
