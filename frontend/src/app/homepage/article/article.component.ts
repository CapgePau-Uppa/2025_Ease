import { Component, ViewChild, ElementRef } from '@angular/core';
import { CommonModule } from '@angular/common';

// Interface pour typer les objets Rayon
interface Rayon {
  icon: string;
  name: string;
  items: string[];
}

@Component({
  selector: 'app-article',
  standalone: true, // Composant autonome
  imports: [CommonModule], // Importation des directives comme NgFor et NgIf
  templateUrl: './article.component.html',
  styleUrls: ['./article.component.css']
})
export class ArticleComponent {
  @ViewChild('carousel') carousel!: ElementRef; // R√©f√©rence du carrousel

  // Liste des rayons avec leurs ic√¥nes, noms et produits
  rayons: Rayon[] = [
    {
      name: 'Fruits et L√©gumes',
      icon: 'ü•¶',
      items: ['Pommes', 'Bananes', 'Tomates', 'Carottes', 'Salade', 'Brocolis']
    },
    {
      name: 'Boucherie',
      icon: 'ü•©',
      items: ['Poulet', 'B≈ìuf', 'Porc', 'Agneau', 'Saucisses']
    },
    {
      name: 'Poissonnerie',
      icon: 'üêü',
      items: ['Saumon', 'Thon', 'Crevettes', 'Moules', 'Calamars']
    },
    {
      name: 'Boulangerie',
      icon: 'ü•ñ',
      items: ['Baguette', 'Croissant', 'Pain de mie', 'Brioche']
    },
    {
      name: '√âpicerie',
      icon: 'üõí',
      items: ['Riz', 'P√¢tes', 'Farine', 'Huile d‚Äôolive', 'Sucre', 'Sel']
    },
    {
      name: 'Produits laitiers',
      icon: 'üßÄ',
      items: ['Lait', 'Fromage', 'Yaourt', 'Beurre', 'Cr√®me fra√Æche']
    },
    {
      name: 'Boissons',
      icon: 'ü•§',
      items: ['Jus d‚Äôorange', 'Eau min√©rale', 'Soda', 'Caf√©', 'Th√©']
    },
    {
      name: 'Surgel√©s',
      icon: '‚ùÑÔ∏è',
      items: ['Pizza surgel√©e', 'Glaces', 'L√©gumes surgel√©s']
    },
    {
      name: 'Hygi√®ne et Beaut√©',
      icon: 'üõÅ',
      items: ['Shampoing', 'Savon', 'Dentifrice', 'D√©odorant']
    },
    {
      name: 'Maison et Entretien',
      icon: 'üè°',
      items: ['Lessive', '√âponge', 'Papier toilette', 'D√©tergent']
    }
  ];

  // Rayon s√©lectionn√©
  selectedRayon: Rayon | null = null;

  // S√©lectionne un rayon
  selectRayon(rayon: Rayon): void {
    this.selectedRayon = rayon;
  }

  // Navigation du carrousel avec des boutons
  scrollCarousel(direction: 'left' | 'right'): void {
    const scrollAmount = 300; // Taille du d√©filement
    if (this.carousel) {
      if (direction === 'left') {
        this.carousel.nativeElement.scrollBy({ left: -scrollAmount, behavior: 'smooth' });
      } else {
        this.carousel.nativeElement.scrollBy({ left: scrollAmount, behavior: 'smooth' });
      }
    }
  }
}
